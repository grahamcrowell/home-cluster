---
version: "3"

tasks:
  sync-secrets:
    desc: Sync all ExternalSecrets
    cmds:
      - for: { var: SECRETS, split: "\n" }
        cmd: kubectl --namespace {{splitList "," .ITEM | first}} annotate externalsecret {{splitList "," .ITEM | last}} force-sync="{{now | unixEpoch}}" --overwrite
    vars:
      SECRETS:
        sh: kubectl get externalsecret --all-namespaces --no-headers --output=jsonpath='{range .items[*]}{.metadata.namespace},{.metadata.name}{"\n"}{end}'
    preconditions:
      - which kubectl
  duplicate_1password_items:
    desc: "Find duplicate 1Password items"
    cmds:
      - |
        echo "Finding duplicate 1Password items in the vault '{{.OP_VAULT}}'..."
        op  --vault {{.OP_VAULT}} item list --format=json | jq '.[].title' | sort | uniq -c | egrep -v ' +1 '

  generate_externalsecret:
    desc: "Generate 1Password items from ExternalSecret yaml files"
    cmds:
      - for: { var: YAML_FILES }
        # cmd: echo "generate_externalsecret_items:{{.ITEM}}"
        task: generate_externalsecret_items:{{.ITEM}}
    vars:
      YAML_FILES:
        sh: find kubernetes/apps -name "*externalsecret.yaml" | sort

  generate_externalsecret_items:*:
    desc: "Generate 1Password items from ExternalSecret YAML"
    internal: true
    cmds:
      - for: { var: FIELDS }
        # cmd: echo generate_1password_item:{{ .TITLE }}:$(echo '{{.ITEM}}' | sed 's/^[{]\{2\} *\.\(.*\) *}}/\1/')
        task: generate_1password_item:{{ .KEY }}:$(echo '{{.ITEM}}' | sed 's/^[{]\{2\} *\.\(.*\) *}}/\1/')
    vars:
      YAML_FILE: "{{index .MATCH 0}}"
      TITLE:
        sh: yq -o json '.metadata.name' < {{.YAML_FILE}} | jq -r '.'
      FIELDS_RESPONSE:
        sh: yq -o json '.spec.target.template.data' < {{.YAML_FILE}}
      FIELDS:
        ref: fromJson .FIELDS_RESPONSE

  generate_1password_item:*:*:
    desc: "Create 1Password 1 item with random value"
    internal: true
    requires:
      vars:
        - TITLE
        - LABEL
    vars:
      TITLE: "{{index .MATCH 0}}"
      LABEL: "{{index .MATCH 1}}"
      VALUE:
        sh: echo "$(openssl rand -base64 16 | head -c 10)"
    cmds:
      - echo "{{.TITLE}}:{{.LABEL}}:{{.VALUE}}"
      - task: upsert_1password_item:{{.TITLE}}:{{.LABEL}}:{{.VALUE}}

  upsert_1password_item:*:*:*:
    desc: "Upsert value of 1Password item"
    internal: true
    requires:
      vars:
        - TITLE
        - LABEL
        - VALUE
    vars:
      TITLE: "{{index .MATCH 0}}"
      LABEL: "{{index .MATCH 1}}"
      VALUE: "{{index .MATCH 2}}"
    deps:
      - create_1password_item:{{.TITLE}}
    cmds:
      - |
        op item edit '{{.TITLE}}' --vault {{.OP_VAULT}} '{{.LABEL}}[Text]={{.VALUE}}' || {
          echo "Failed to update 1Password item '{{.TITLE}}'. Ensure you have the correct permissions.";
        }

  create_1password_item:*:
    desc: "Create empty 1Password item"
    internal: true
    vars:
      TITLE: "{{index .MATCH 0}}"
    requires:
      vars:
        - TITLE
    status:
      - op --vault '{{.OP_VAULT}}' item get '{{.TITLE}}'
    cmds:
      - |
        echo "Creating 1Password item '{{.TITLE}}' with field '{{.LABEL}}' in '{{.OP_VAULT}}'..."
        op item create --category "Password" --vault {{.OP_VAULT}} --title '{{.TITLE}}' || {
          echo "Failed to create 1Password item '{{.TITLE}}'. Ensure you have the correct permissions.";
        }